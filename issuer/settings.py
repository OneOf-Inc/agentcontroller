"""
Django settings for issuer project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import json
from api.services import awssecrets
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEPLOYED = os.environ.get("DEPLOYED", False) in ('true', '1')

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api.apps.ApiConfig',
    'issuer',
    # 3rd party
    'rest_framework',
    'adrf',
    'drf_yasg',
    'corsheaders'

]

MIDDLEWARE = [
    'api.middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'issuer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'issuer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
if DEPLOYED:
    secrets = awssecrets.get_secret()

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': secrets["DB_NAME"],
            'USER': secrets["DB_USER"],
            'PASSWORD': secrets["DB_PASSWORD"],
            'HOST': secrets["DB_HOST"],
            'PORT': secrets["DB_PORT"]
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static") 


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

##=== Environment Variables:

load_dotenv()

SECRET_NAME = os.environ.get('SECRET_NAME')
REGION_NAME = os.environ.get('REGION_NAME')
CRED_PREVIEW_TYPE = os.environ.get('CRED_PREVIEW_TYPE')

def get_secrets():
    if os.environ.get('ENV') != 'local':
        # Fetch from AWS Secrets Manager in production
        return awssecrets.get_secret()
    else:
        # Use default values for local development
        return {
            'VAULT_URL': os.environ.get('VAULT_URL'),
            'ROLE_ID': os.environ.get('ROLE_ID'),
            'SECRET_ID': os.environ.get('SECRET_ID'),
            'VAULT_TOKEN': os.environ.get('VAULT_TOKEN'),
            'ISSUER_URL': os.environ.get('ISSUER_URL'),
            'ISSUER_API_KEY': os.environ.get('ISSUER_API_KEY'),
            'HOLDER_URL': os.environ.get('HOLDER_URL'),
            'HOLDER_API_KEY': os.environ.get('HOLDER_API_KEY'),
            'VERIFIER_URL': os.environ.get('VERIFIER_URL'),
            'VERIFIER_API_KEY': os.environ.get('VERIFIER_API_KEY'),
            'ISSUER_DID': os.environ.get('ISSUER_DID')
        }

##=== SENSITIVE SECRETS:
secrets = get_secrets()

# Vault
VAULT_URL = secrets['VAULT_URL']
ROLE_ID = secrets['ROLE_ID']
SECRET_ID = secrets['SECRET_ID']
VAULT_TOKEN = secrets['VAULT_TOKEN']

# AGENTS
ISSUER_URL = secrets['ISSUER_URL']
ISSUER_API_KEY = secrets['ISSUER_API_KEY']
HOLDER_URL = secrets['HOLDER_URL']
HOLDER_API_KEY = secrets['HOLDER_API_KEY']
VERIFIER_URL = secrets['VERIFIER_URL']
VERIFIER_API_KEY = secrets['VERIFIER_API_KEY']
ISSUER_DID = secrets['ISSUER_DID']