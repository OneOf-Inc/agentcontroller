###############################################
# Base Image
###############################################
FROM python:3.11-slim as python-base

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=off
ENV PIP_DISABLE_PIP_VERSION_CHECK=on
ENV PIP_DEFAULT_TIMEOUT=100
ENV POETRY_VERSION=1.3.2
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV POETRY_NO_INTERACTION=1
ENV POETRY_HOME="/poetry"
ENV PYSETUP_PATH="/app"
ENV VENV_PATH "/venv"

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"
RUN apt-get update && apt-get install --no-install-recommends -y ssh curl build-essential libpq-dev gcc git make

###############################################
# Builder Image
###############################################
FROM python-base as builder-base

# Setup python virtual env
RUN python -m venv $VENV_PATH

# install poetry - respects $POETRY_VERSION & $POETRY_HOME
RUN curl -sSL https://install.python-poetry.org | python -

# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY poetry.lock pyproject.toml ./

RUN . $VENV_PATH/bin/activate && poetry install --without dev --no-root --no-interaction --no-ansi

###############################################
# Production Image
###############################################
FROM python:3.11-slim as production

ENV PYSETUP_PATH="/app"
ENV VENV_PATH "/venv"

WORKDIR "/app"

COPY --from=builder-base $VENV_PATH $VENV_PATH

ENV PATH="$VENV_PATH/bin:$PATH"

COPY ./ ./

CMD ["sh", "./bin/start.sh"]
